#!/usr/bin/env groovy
def gv

pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    parameters {
        booleanParam(name: 'executeTests', defaultValue: true, description: "should execute tests")
    }
    stages {
        stage('increment application version') {
            steps {
                script {
                    echo "incrementing application version ..."
                    sh "mvn build-helper:parse-version versions:set \
                        -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.nextMinorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
                        versions:commit"
                    def pomContent = readFile('pom.xml')
                    def versionPattern = /<version>(.*?)<\/version>/
                    def versionMatcher = versionPattern.matcher(pomContent)
                    if (versionMatcher.find()) {
                        def version = versionMatcher.group(1)
                        env.IMAGE_NAME = "$version-$BUILD_NUMBER"
                    }
                }
            }
        }
        stage('init') {
            steps {
                script {
                    gv = load "./jenkins-params-build/script.groovy"
                }

            }
        }
        stage('test') {
            when {
                expression {
                    params.executeTests
                }
            }
            steps {
                script {
                    gv.testImage()
                }
            }
        }
        stage('build Docker Image') {
            steps {
                script {
                    gv.buildImage()
                }
            }
        }
        stage('deploy') {
            steps {
                script {
                    env.ENV = input message: "Select the environment to deploy to", ok: "Done", parameters: [choice(name: 'ONE', choices: ['dev', 'staging', 'prod'], description: '')]                    
                    gv.deployImage()
                    echo "Deploying to ${ENV}"
                }
            }
        }
    }
}